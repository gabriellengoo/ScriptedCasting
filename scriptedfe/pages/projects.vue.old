<template>
  <main class="mt-1 md:pt-20 flex h-screen overflow-hidden allmb">
    <div class="scroll marquee-container marquee-1 w-1/4" ref="marquee1">
      <Grid class="" :items="grid.grid" size="small"></Grid>
    </div>
    <div class="scroll marquee-container marquee-2 w-1/4" ref="marquee2">
      <div><Grid class="" :items="grid.gridm" size="small"></Grid></div>
    </div>
    <div class="scroll marquee-container marquee-3 w-1/4" ref="marquee3">
      <Grid class="" :items="grid.gride" size="small"></Grid>
    </div>
    <div class="scroll marquee-container marquee-4 w-1/4" ref="marquee4">
      <Grid class="" :items="grid.gridl" size="small"></Grid>
    </div>
  </main>
</template>

<script>
import { mapState } from 'vuex';
import gsap from 'gsap';

export default {
  data() {
    return {
      lenisEnabled: false,
      scrollSpeed: 1, // Initial scroll speed factor
    };
  },
  computed: {
    ...mapState(['grid', 'activeProject']),
  },
  methods: {
    animateVerticalMarquees() {
      const tl1 = gsap.timeline({ repeat: -1, yoyo: true });
      const tl2 = gsap.timeline({ repeat: -1, yoyo: true });
      const tl3 = gsap.timeline({ repeat: -1, yoyo: true });
      const tl4 = gsap.timeline({ repeat: -1, yoyo: true });

      tl1.to(this.$refs.marquee1, { duration: 20 / this.scrollSpeed, y: '-80%' });
      tl2.to(this.$refs.marquee2, { duration: 15 / this.scrollSpeed, y: '-80%' });
      tl3.to(this.$refs.marquee3, { duration: 50 / this.scrollSpeed, y: '-80%' });
      tl4.to(this.$refs.marquee4, { duration: 15 / this.scrollSpeed, y: '-50%' });

      return [tl1, tl2, tl3, tl4];
    },
    pauseMarquee(timeline) {
      timeline.pause();
    },
    playMarquee(timeline) {
      timeline.play();
    },
    updateScrollSpeed() {
      // Update scroll speed based on scroll position
      const scrollPosition = window.scrollY;
      this.scrollSpeed = 1 + (scrollPosition / 500); // Adjust this factor as needed
      const marqueesTimelines = this.marqueesTimelines;
      if (marqueesTimelines) {
        marqueesTimelines.forEach((tl, index) => {
          tl.timeScale(this.scrollSpeed);
        });
      }
    },
  },
  mounted() {
    const marqueesTimelines = this.animateVerticalMarquees();
    this.marqueesTimelines = marqueesTimelines;
    this.updateScrollSpeed(); // Initial call to set scroll speed
    window.addEventListener('scroll', this.updateScrollSpeed); // Listen for scroll event
    // Add event listeners for mouseenter and mouseleave as before...
  },
  beforeDestroy() {
    window.removeEventListener('scroll', this.updateScrollSpeed); // Remove scroll event listener on component destroy
  },
};
</script>


<style scoped>

.scroll{
    /* overflow-y: scroll; */
}

@media (max-width: 768px) {
  .allmb{
    /* height: 90vw;
  display: flex;
  justify-content: center;
  align-content: center; */
  }
  .marquee-container {
    width: 50vw;
  }
}
</style>
